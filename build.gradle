buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.bmuschko:gradle-tomcat-plugin:2.2.2"
        classpath "org.flywaydb:flyway-gradle-plugin:3.2.1"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'application'
apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'org.flywaydb.flyway'

if (System.getenv("PROFILE") == 'snap') {
    apply from: 'profile_snap.gradle'
} else if (System.getenv("PROFILE") == 'heroku') {
    apply from: 'profile_heroku.gradle'
} else {
    apply from: 'profile_dev.gradle'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '1.0'

war.baseName = "simpleSpring"

tomcat.contextPath = '/'

repositories {
    mavenCentral()
}

configurations {
    runtimeOnly
}

dependencies {
    testCompile "junit:junit:4.11",
                "org.mockito:mockito-core:1.9.5"

    compile "org.springframework:spring-webmvc:4.1.6.RELEASE",
            "org.springframework:spring-orm:4.1.6.RELEASE",
            "org.springframework.security:spring-security-core:4.0.1.RELEASE",
            "org.springframework.security:spring-security-config:4.0.1.RELEASE",
            'org.opensaml:opensaml:2.6.1',
            'xml-apis:xml-apis:1.4.01',
            'org.slf4j:slf4j-simple:1.7.7',
            "log4j:log4j:1.2.17",

            //database dependencies
            "org.postgresql:postgresql:9.3-1102-jdbc4",
            "org.hibernate:hibernate-validator:5.0.1.Final",
            "org.hibernate:hibernate-core:4.3.6.Final",
            fileTree('lib')

    compile ("org.springframework.security:spring-security-web:4.0.1.RELEASE") {
        exclude group: "org.springframework", module: "spring-jdbc"
        exclude group: "org.springframework", module: "spring-tx"
    }

    providedCompile "javax.servlet:servlet-api:2.5"

    // to run our App on Heroku
    runtimeOnly "com.github.jsimone:webapp-runner:7.0.57.2"

    def tomcatVersion = '7.0.59'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"

    runtime 'javax.servlet:jstl:1.2'
}

task copyToLib << {
    copy {
        from configurations.runtimeOnly.copy().setTransitive(false)
        into "$buildDir/libs"
        rename { name ->
            def artifacts = configurations.runtimeOnly.resolvedConfiguration.resolvedArtifacts
            def artifact = artifacts.find { it.file.name == name }
            "${artifact.name}.${artifact.extension}"
        }
    }
}

task runApp(dependsOn: ["setEnv", "tomcatRun"])

task dbInit(type: Exec, dependsOn: ["setEnv"]) {
    commandLine 'createdb', '-p', '5432', 'infotrackdb'
}

task dbUpdate(dependsOn: ["setEnv", "flywayMigrate"])

flyway {
    url = "${props.postgresqlUrl}"
    user = "${props.postgresqlUsername}"
    password = "${props.postgresqlPassword}"
    driver = "org.postgresql.Driver"
    locations = ["filesystem:${project.rootDir.absolutePath}/src/main/resources/db.migration"]
}

setEnv.doLast {
    ant.replaceregexp(file: 'src/main/resources/okta_config.xml', match: "<default>.*</default>", replace: "<default>" + props.oktaEntityId + "</default>")
    ant.replaceregexp(file: 'src/main/resources/okta_config.xml', match: "entityID=.*>", replace: "entityID='" + props.oktaEntityId + "'>")
    ant.replaceregexp(file: 'src/main/resources/okta_config.xml', match: "<ds:X509Certificate>.*</ds:X509Certificate>", replace: "<ds:X509Certificate>" + props.oktaCertificate + "</ds:X509Certificate>")
    ant.replaceregexp(file: 'src/main/resources/okta_config.xml', flags: 'g', match: "Location=.*/>", replace: "Location='" + props.oktaRedirect + "'/>")
}
